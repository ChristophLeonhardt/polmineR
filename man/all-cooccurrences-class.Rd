% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cooccurrences.R, R/as.sparseMatrix.R
\docType{class}
\name{Cooccurrences-class}
\alias{Cooccurrences-class}
\alias{as.simple_triplet_matrix,Cooccurrences-method}
\alias{ll,Cooccurrences-method}
\alias{as_igraph}
\alias{subset,Cooccurrences-method}
\alias{decode,Cooccurrences-method}
\alias{as.sparseMatrix,Cooccurrences-method}
\title{Cooccurrences class for corpus/partition.}
\usage{
\S4method{as.simple_triplet_matrix}{Cooccurrences}(x)

\S4method{ll}{Cooccurrences}(.Object, verbose = TRUE)

as_igraph(x, edge_attributes = c("ll", "ab_count", "rank_ll"),
  vertex_attributes = "count", as.undirected = TRUE, drop = c("\\u0084",
  "\\u0093"))

\S4method{subset}{Cooccurrences}(x, ..., by)

\S4method{decode}{Cooccurrences}(.Object)

\S4method{as.sparseMatrix}{Cooccurrences}(x, col = "ab_count", ...)
}
\arguments{
\item{x}{A \code{Cooccurrences} class object.}

\item{.Object}{A \code{Cooccurrences}-class object.}

\item{verbose}{Logical.}

\item{edge_attributes}{Attributes from stat \code{data.table} in x to add to edges.}

\item{vertex_attributes}{Vertex attributes to add to nodes.}

\item{as.undirected}{Logical, whether to return directed or undirected graph.}

\item{drop}{A character vector indicating names of nodes to drop from
\code{igraph} object that is prepared.}

\item{...}{Further arguments passed into a further call of \code{subset}.}

\item{by}{A \code{features}-class object.}

\item{col}{A column to extract.}
}
\description{
The class inherits from the \code{textstat}-class.
}
\details{
The \code{as.simple_triplet_matrix}-method will transform a
  \code{Cooccurrences} object into a sparse matrix. For reasons of memory
  efficiency, decoding token ids is performed within the method at the
  latests possible stage. It is NOT necessary that decoded tokens are present
  in the table in the \code{Cooccurrences} object.

The \code{as_igraph()}-function can be used to turn an object of the \code{Cooccurrences}-class 
into an \code{igraph}-object.

The \code{subset} method, as a particular feature, allows a
  \code{Coocccurrences}-object to be subsetted by a \code{featurs}-Object
  resulting from a features extraction that compares two Cooccurrences
  objects.

For reasons of memory efficiency, the initial \code{data.table} in
  the slot \code{stat} of a \code{Cooccurrences}-object will identify tokens by an
  integer id, not by the string of the token. The \code{decode()}-method will
  replace these integer columns with human-readable character vectors. Due to
  the reference logic of the \code{data.table} object, this is an in-place
  operation, peformed without copying the table. The modified object is
  returned invisibly; usually it will not be necessary to catch the return
  value.

Returns a \code{sparseMatrix} based on the counts of term cooccurrences. At this stage,
it is required that decoded tokens are present.
}
\section{Slots}{

\describe{
\item{\code{left}}{Single \code{integer} value, number of tokens to the left.}

\item{\code{right}}{Single \code{integer} value, number of tokens to the right.}

\item{\code{p_attribute}}{A \code{character} vector, the p-attribute the evaluation of the corpus is based on.}

\item{\code{corpus}}{Length-one \code{character} vector, the CWB corpus used.}

\item{\code{stat}}{A \code{data.table} with the statistical analysis of cooccurrences.}

\item{\code{encoding}}{Length-one \code{character} vector, the encoding of the corpus.}

\item{\code{keep}}{A \code{list} of named character vectors, names are p-attributes.}

\item{\code{drop}}{A \code{list} of named character vectors, names are p-attributes.}

\item{\code{partition}}{A \code{partition}.}

\item{\code{window_sizes}}{A \code{data.table} linking the number of tokens in the
context of a token identified by id.}

\item{\code{minimized}}{Logical, whether the object has been minimized.}
}}

\examples{
X <- Cooccurrences("REUTERS", p_attribute = "word", left = 5L, right = 5L)
m <- as.simple_triplet_matrix(X)
X <- Cooccurrences("REUTERS", p_attribute = "word", left = 5L, right = 5L)
decode(X)
sm <- as.sparseMatrix(X)
stm <- as.simple_triplet_matrix(X)
}
