% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/S4classes.R, R/phrases.R
\docType{class}
\name{phrases}
\alias{phrases}
\alias{phrases-class}
\alias{as.phrases}
\alias{as.phrases,ngrams-method}
\alias{as.phrases,matrix-method}
\alias{as.character,phrases-method}
\alias{concatenate_phrases}
\title{Manage and use phrases}
\usage{
as.phrases(.Object, ...)

\S4method{as.phrases}{ngrams}(.Object, ...)

\S4method{as.phrases}{matrix}(.Object, corpus, enc)

\S4method{as.character}{phrases}(x, p_attribute)

concatenate_phrases(dt, phrases, col)
}
\arguments{
\item{.Object}{bla}

\item{...}{bla}

\item{corpus}{A length-one \code{character} vector, the corpus ID of the corpus
from which regions / the \code{data.table} representing a decoded corpus is derived.}

\item{enc}{bla}

\item{x}{bla}

\item{p_attribute}{bla}

\item{dt}{A \code{data.table}.}

\item{phrases}{bla}

\item{col}{If \code{.Object} is a \code{data.table}, the column to concatenate.}
}
\description{
Class to manage phrases.
}
\examples{
\dontrun{
obs <- corpus("GERMAPARLMINI") \%>\% count(p_attribute = "word")

phrases <- corpus("GERMAPARLMINI") \%>\%
  ngrams(n = 2L, p_attribute = "word") \%>\%
  pmi(observed = obs) \%>\% 
  subset(ngram_count > 5L) \%>\%
  subset(1:100) \%>\%
  as.phrases()

dtm <- corpus("GERMAPARLMINI") \%>\%
  as.speeches(s_attribute_name = "speaker", progress = TRUE) \%>\%
  count(phrases = phrases@cpos, p_attribute = "word", progress = TRUE, verbose = TRUE) \%>\%
  as.DocumentTermMatrix(col = "count", verbose = FALSE)
}
reuters_phrases <- ngrams("REUTERS", p_attribute = "word", n = 2L) \%>\%
  pmi(observed = count("REUTERS", p_attribute = "word")) \%>\%
  subset(ngram_count >= 5L) \%>\%
  subset(1:25) \%>\%
  as.phrases()

phr <- as.character(reuters_phrases, p_attribute = "word")
cqp_phrase_queries <- c(
  '"oil" "revenue"',
  '"Sheikh" "Aziz"',
  '"Abdul" "Aziz"',
  '"Saudi" "Arabia"',
  '"oil" "markets"'
)
reuters_phrases <- cpos("REUTERS", cqp_phrase_queries, p_attribute = "word") \%>\%
  as.phrases(corpus = "REUTERS", enc = "latin1")
lexical_units_cqp <- c(
  '"Deutsche.*" "Bundestag.*"',
  '"sozial.*" "Gerechtigkeit"',
  '"Ausschuss" "fÃ¼r" "Arbeit" "und" "Soziales"',
  '"soziale.*" "Marktwirtschaft"',
  '"freiheitliche.*" "Grundordnung"'
)
phrases_regions <- cpos("GERMAPARLMINI", query = lexical_units_cqp, cqp = TRUE)
phr <- as.phrases(phrases_regions, corpus = "GERMAPARLMINI", enc = "word")

dt <- decode("GERMAPARLMINI", p_attribute = "word", s_attribute = character(), to = "data.table")
y <- concatenate_phrases(dt, phrases = phr, col = "word")
}
\seealso{
Other classes to manage corpora: \code{\link{corpus-class}},
  \code{\link{regions}}, \code{\link{subcorpus}}
}
\concept{classes to manage corpora}
