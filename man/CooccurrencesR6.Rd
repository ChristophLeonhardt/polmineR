% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cooccurrences.R
\docType{data}
\name{Cooccurrences}
\alias{Cooccurrences}
\title{Get all cooccurrences in partition.}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
Cooccurrences
}
\description{
R6 class to generate and manage cooccurrence statistics. The R6 class system
is used as a matter of memory efficiency, to avoid the copying of objects the
S4 class system usually requires.
}
\details{
To reduce the size of the \code{data.table} with the cooccurrence statistics,
the parameters \code{keep} and \code{drop} provide vectors with tokens that
will be kept and dropped, respectively. The parameters are used by the
\code{trim} method.
}
\section{Slots}{

\describe{
  \item{\code{corpus}}{The corpus the evaluation is based on.}
  \item{\code{partition}}{The \code{partition} for which all cooccurrences shall be computed.}
  \item{\code{p_attribute}}{character}
  \item{\code{keep}}{A list of named character vectors, names are p-attributes.}
  \item{\code{drop}}{A list of named character vectors, names are p-attributes.}
  \item{\code{method}}{The statistical test to use (such as "ll").}
  \item{\code{window}}{An integer value, the number of tokens to the left and
  to the right of nodes.}
  \item{\code{verbose}}{Logical.}
  \item{\code{window_sizes}}{A \code{data.table} linking the number of tokens
  in the context of a token identified by id.}
  \item{\code{stat}}{A \code{data.table} with the statistical information on cooccurrences.}
}
}

\section{Arguments}{

\describe{
  \item{\code{x}}{A corpus specified by a length-one character vector, or a \code{partition}-object.}
  \item{\code{keep}}{}
  \item{\code{verbose}}{}
  \item{\code{...}}{}
}
}

\section{Methods}{

\describe{
  \item{\code{$initialize(x, p_attribute = "word", window = 5L, verbose =
  TRUE, drop = c(polmineR::punctuation, tm::stopwords("de")), keep =
  NULL)}}{Initialize.}
  \item{\code{$count()}}{Count the cooccurrence of terms. The field 'dt' is
  populated with a \code{data.table} with the columns 'a_id', 'b_id' and
  'ab_count'.}
  \item{\code{$trim(function(action, by.id)}}{Trim the overall list of
  cooccurrences by dropping terms that are not frequent. Recommended to speed
  up computation of statistical test values.}
  \item{\code{$ll()}}{Based on counts of term cooccurrences, the
  \code{data.table} in the field \code{dt} is enriched by log likelihood
  test.}
  \item{\code{$get_features(reference, included = FALSE,
  method = "ll", verbose = TRUE)}}{}
  \item{\code{$select_features(reference, included = FALSE, method = "ll",
  verbose = TRUE, n = 250)}}{}
  \item{\code{$minimize()}}{If more than one p_attribute has been used,
  concatenate decoded p_attributes.}
  \item{\code{$as.simple_triplet_matrix()}}{Returns a simple triplet
  matrix based on the counts of term cooccurrences. If counts are not yet
  present, that is done first.}
  \item{\code{$as.sparseMatrix(x, col)}}{Return a sparse matrix with the term
  cooccurrence matrix.}
  \item{\code{$as.igraph(edge_attributes = "ll", vertex_attributes = NULL,
  as.undirected = TRUE)}}{Transform graph as igraph object.}
}
}

\examples{
stopwords <- unname(unlist(noise(terms("REUTERS", p_attribute = "word"), stopwordsLanguage = "en")))
r <- Cooccurrences$new(
  x = "REUTERS",
  p_attribute = "word",
  window = 5L,
  drop = stopwords
)
r$count()
r$trim(action = "drop", by.id = TRUE)
r$ll()
r$subset(ll > 11.83 & ab_count >= 5)
data.table::setorderv(r$stat, cols = "ll", order = -1L)
head(r$stat, 25)

if (requireNamespace("igraph", quietly = TRUE)){
  g <- r$as.igraph(as.undirected = TRUE)
  plot(g)
}

a <- cooccurrences(r, query = "oil")
a <- data.table::as.data.table(a)

b <- cooccurrences("REUTERS", query = "oil")
b <- data.table::as.data.table(b)
b <- b[!word \%in\% stopwords]

# now let's check whether resulty are identical
all(b[["word"]][1:50] == a[["word"]][1:50])
}
\keyword{datasets}
