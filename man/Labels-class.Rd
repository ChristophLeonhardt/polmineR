% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/S4classes.R, R/label.R
\docType{class}
\name{labels-class}
\alias{labels-class}
\alias{initialize,labels-method}
\alias{label}
\alias{label,kwic-method}
\alias{labels,kwic-method}
\title{Labels class and method}
\usage{
\S4method{initialize}{labels}(.Object, n)

label(x, ...)

\S4method{label}{kwic}(x, i, j, value, js = c("Handsontable",
  "DataTables"))

\S4method{labels}{kwic}(object)
}
\arguments{
\item{.Object}{A \code{labels} object.}

\item{n}{The integer index of a label to retrieve or modify.}

\item{x}{An S4 object with a slot \code{labels} (e.g. an object of class
\code{kwic}).}

\item{...}{Further arguments.}

\item{i}{The row number (single \code{integer} value) of the
\code{data.table} of the \code{labels} object where a new value shall be
assigned.}

\item{j}{The column number (single \code{integer} value) of the
\code{data.table} of the \code{labels} object where a new value shall be
assigned.}

\item{value}{A value to assign.}

\item{js}{The javascript library to use to display tables (either "DataTables"
or "Handsontable").}

\item{object}{A \code{labels} object.}
}
\value{
The modified input object is returned invisibly.
}
\description{
The \code{labels}-class in combination with the \code{label()} generic method
offers the tools to implement a workflow to categorize/annotate
results by assigning labels.

The \code{labels} class and the \code{label}-method supports generating and
working with labelled data. They rely on data in a slot \code{labels} of the
S4 object to be modified. Operations are deliberately in-place.

The \code{label}-method is designed to be used in a RStudio session. Calling
it generates a shiny gadget (see
\url{https://shiny.rstudio.com/articles/gadgets.html}) shown in the viewer
pane of RStudio. The htmlwidget embedded in the gadget can be either based on
the JavaScript library DataTables (default, exposed by R package \code{DT}),
or Handsontable (exposed by R package \code{rhandsontable}). The JavaScript
library to be used is specified with the argument \code{js}.

The pinpoint is that you can modify labels. When using DataTables,
doubleclick on the field you with to change, modify the value, and finish
data entry by hitting enter or clicking somewhere else. When using
Handsontable, simply click on the field you wish to change.

The method returns the modified input object. Note however that changes of
labels are deliberately in-place operations. Accordingly, the input object is
changed even if you do not close the gadget "properly" by hitting the "Done"
button and catch the modified object, which may be forgotten easily and would
be painful after the work that may have been invested.
}
\section{Methods (by generic)}{
\itemize{
\item \code{initialize}: When initializing a \code{labels} class object, an
empty \code{data.table} is assigned.

\item \code{labels}: Get the \code{data.table} with labels from the
\code{labels} object in the \code{labels} slot of the \code{kwic} class
object.
}}

\section{Slots}{

\describe{
\item{\code{labels}}{A \code{data.table} that keeps the assigned labels.}
}}

\examples{
use("polmineR")

# upon initializing a kwic object, there is a minimal labels object
# in the labels slot of the kwic object, which we can get using the
# labels-method
o <- kwic("REUTERS", query = "oil")
labels(o) # see the result (a data.table)

# assign new columns as follows, using the reference semantics of the
# data.table you get by calling the labels-method on an object 
labels(o)[, "class" := factor(levels = c("a", "b", "c"))]
labels(o)[, "description" := ""]
labels(o) # see the result

# the label-method can be used to assign values; note that is an in-place
# operation using the reference semantics of the data.table
label(o, i = 77, j = 1, value = FALSE)
label(o, i = 78, j = 1, value = FALSE)
labels(o)

\dontrun{
label(o)
labels(o) # to see changes made

# maybe we want additional metadata
enrich(o, s_attributes = "places")
label(o)
labels(o)

# to get some extra context
o <- enrich(o, extra = 5L, table = TRUE)
label(o)

#' label(o, js = "DataTables")
labels(o) # to see changes made
}
}
