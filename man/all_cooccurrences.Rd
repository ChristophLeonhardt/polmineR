% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cooccurrences.R
\docType{methods}
\name{Cooccurrences}
\alias{Cooccurrences}
\alias{Cooccurrences,character-method}
\alias{Cooccurrences,partition-method}
\title{Get all cooccurrences.}
\usage{
Cooccurrences(.Object, ...)

\S4method{Cooccurrences}{character}(.Object, ...)

\S4method{Cooccurrences}{partition}(.Object, p_attribute, left, right,
  stoplist = NULL, mc = getOption("polmineR.mc"), verbose = FALSE,
  progress = FALSE, ...)
}
\arguments{
\item{.Object}{A length-one character vector indicating a corpus, or a
\code{partition} object.}

\item{...}{Further arguments.}

\item{p_attribute}{The positional attribute.}

\item{left}{Size of left context.}

\item{right}{Size of right context.}

\item{stoplist}{Tokens to drop.}

\item{mc}{Logical.}

\item{verbose}{Logical.}

\item{progress}{Logical.}
}
\description{
Get all cooccurrences.
}
\examples{
stopwords <- unname(unlist(noise(terms("REUTERS", p_attribute = "word"), stopwordsLanguage = "en")))
r <- Cooccurrences(.Object = "REUTERS", p_attribute = "word", left = 5L, right = 5L, stoplist = stopwords)
ll(r)
r <- subset(r, ll > 11.83 & ab_count >= 5)
decode(r)
data.table::setorderv(r@stat, cols = "ll", order = -1L)
head(r, 25)

if (requireNamespace("igraph", quietly = TRUE)){
  r@partition <- enrich(r@partition, p_attribute = "word")
  g <- as_igraph(r, as.undirected = TRUE)
  plot(g)
}

a <- cooccurrences(r, query = "oil")
a <- data.table::as.data.table(a)

b <- cooccurrences("REUTERS", query = "oil", left = 5, right = 5, p_attribute = "word")
b <- data.table::as.data.table(b)
b <- b[!word \%in\% stopwords]

# now let's check whether results are identical
all(b[["word"]][1:5] == a[["word"]][1:5])


stopwords <- unlist(noise(terms("GERMAPARLMINI", p_attribute = "word"), stopwordsLanguage = "german"))

plpr_partition <- partition("GERMAPARLMINI", date = "2009-11-10", interjection = "speech", p_attribute = "word")
plpr_cooc <- Cooccurrences(
  plpr_partition, p_attribute = "word",
  left = 3L, right = 3L,
  stoplist = stopwords,
  verbose = TRUE
)
decode(plpr_cooc)
ll(plpr_cooc)

merkel <- partition("GERMAPARLMINI", speaker = "Merkel", date = "2009-11-10", interjection = "speech", regex = TRUE, p_attribute = "word")
merkel_cooc <- Cooccurrences(
  merkel, p_attribute = "word",
  left = 3L, right = 3L,
  stoplist = stopwords, 
  verbose = TRUE
)
decode(merkel_cooc)
ll(merkel_cooc)

merkel_min <- subset(
  merkel_cooc,
  by = subset(features(merkel_cooc, plpr_cooc), rank_ll <= 50)
  )
  
  
protocol <- partition(
  "GERMAPARLMINI",
  date = "2009-11-10",
  p_attribute = c("word", "pos"),
  interjection = "speech"
)
protocol_cooc <- Cooccurrences(
  protocol,
  p_attribute = c("word", "pos"),
  left = 3L, right = 3L
  )
ll(protocol_cooc)
decode(protocol_cooc)

merkel <- partition(
  "GERMAPARLMINI",
  speaker = "Merkel",
  date = "2009-11-10",
  interjection = "speech",
  regex = TRUE,
  p_attribute = c("word", "pos")
)
merkel_cooc <- Cooccurrences(
  merkel,
  p_attribute = c("word", "pos"),
  left = 3L, right = 3L,
  verbose = TRUE
)
ll(merkel_cooc)
decode(merkel_cooc)

f <- features(merkel_cooc, protocol_cooc)
f <- subset(f, a_pos \%in\% c("NN", "ADJA"))
f <- subset(f, b_pos \%in\% c("NN", "ADJA"))
f <- f[1:50]

merkel_min <- subset(merkel_cooc, by = f)

if (requireNamespace("igraph", quietly = TRUE)){
  g <- as_igraph(merkel_min, as.undirected = TRUE)
  plot(g)
}
}
