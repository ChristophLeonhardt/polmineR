% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/S4classes.R, R/corpus.R
\docType{class}
\name{subcorpus-class}
\alias{subcorpus-class}
\alias{subcorpus}
\alias{subset,corpus-method}
\alias{subset,character-method}
\alias{subset,subcorpus-method}
\title{S4 subcorpus class.}
\usage{
\S4method{subset}{corpus}(x, subset, regex = FALSE, ...)

\S4method{subset}{character}(x, ...)

\S4method{subset}{subcorpus}(x, subset, ...)
}
\arguments{
\item{x}{A \code{corpus} or \code{subcorpus} object.}

\item{subset}{A \code{logical} expression indicating elements or rows to
keep. The expression may be unevaluated (using \code{quote} or
\code{bquote}).}

\item{regex}{A \code{logical} value. If \code{TRUE}, values for s-attributes
defined using the three dots (...) are interpreted as regular expressions
and passed into a \code{grep} call for subsetting a table with the regions
and values of structural attributes. If \code{FALSE} (the default), values
for s-attributes must match exactly.}

\item{...}{An expression that will be used to create a subcorpus from
s-attributes.}
}
\description{
S4 subcorpus class.
}
\section{Slots}{

\describe{
\item{\code{s_attributes}}{A named \code{list} with the structural attributes
defining the subcorpus.}

\item{\code{cpos}}{A \code{matrix} with left and right corpus positions defining
regions (two columns).}

\item{\code{annotations}}{Object of class \code{list}.}

\item{\code{size}}{Total size of the subcorpus (length-one \code{integer} vector).}

\item{\code{metadata}}{Object of class \code{data.frame}, metadata information.}

\item{\code{strucs}}{Object of class \code{integer}, the strucs defining the
subcorpus.}

\item{\code{xml}}{Object of class \code{character}, whether the xml is "flat" or
"nested".}

\item{\code{s_attribute_strucs}}{Object of class \code{character}, the base node.}
}}

\examples{
use("polmineR")
a <- corpus("GERMAPARLMINI")
sc <- subset(a, speaker == "Angela Dorothea Merkel")
sc <- subset(a, speaker == "Bärbel Höhn")
sc <- subset(a, speaker == "Angela Dorothea Merkel" & date == "2009-10-28")
sc <- subset(a, grepl("Merkel", speaker))
sc <- subset(a, grepl("Merkel", speaker) & date == "2009-10-28")

sc <- subset(a, speaker = "Angela Dorothea Merkel")
sc <- subset(a, speaker = "Bärbel Höhn")
sc <- subset(a, speaker = "Angela Dorothea Merkel", date = "2009-10-28")
sc <- subset(a, speaker = "Merkel", regex = TRUE)
sc <- subset(a, speaker = c("Merkel", "Kauder"), regex = TRUE)
sc <- subset(a, speaker = "Merkel", date = "2009-10-28", regex = TRUE)

who <- "Volker Kauder"
subset(a, quote(speaker == who))

for (who in c("Angela Dorothea Merkel", "Volker Kauder", "Ronald Pofalla")){
   sc <- subset(a, bquote(speaker == .(who)))
   print(size(sc))
}

b <- lapply(
  c("Angela Dorothea Merkel", "Volker Kauder", "Ronald Pofalla"),
  function(who) subset(a, bquote(speaker == .(who)))
)
sapply(b, size)
use("polmineR")
sc <- subset("GERMAPARLMINI", grepl("Merkel", speaker))
sc <- subset("GERMAPARLMINI", speaker == "Angela Dorothea Merkel")
sc <- subset("GERMAPARLMINI", speaker == "Angela Dorothea Merkel" & date == "2009-10-28")
sc <- subset("GERMAPARLMINI", grepl("Merkel", speaker) & date == "2009-10-28")
a <- corpus("GERMAPARLMINI")
b <- subset(a, date == "2009-11-10")
c <- subset(b, speaker == "Frank-Walter Steinmeier")
}
\seealso{
Other classes to manage corpora: \code{\link{corpus-class}},
  \code{\link{regions}}
}
\concept{classes to manage corpora}
