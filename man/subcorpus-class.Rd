% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/S4classes.R, R/corpus.R, R/size.R
\docType{class}
\name{subcorpus}
\alias{subcorpus}
\alias{subcorpus-class}
\alias{summary,subcorpus-method}
\alias{name<-,subcorpus-method}
\alias{plpr_subcorpus-class}
\alias{press_subcorpus-class}
\alias{subset,corpus-method}
\alias{subset,character-method}
\alias{subset,subcorpus-method}
\alias{size,subcorpus-method}
\title{The S4 subcorpus class.}
\usage{
\S4method{summary}{subcorpus}(object)

\S4method{name}{subcorpus}(x) <- value

\S4method{subset}{corpus}(x, subset, regex = FALSE, ...)

\S4method{subset}{character}(x, ...)

\S4method{subset}{subcorpus}(x, subset, ...)

\S4method{size}{subcorpus}(x, s_attribute = NULL, ...)
}
\arguments{
\item{x}{A \code{corpus} or \code{subcorpus} object.}

\item{value}{A \code{character} vector to assign as name to slot \code{name}
of a \code{subcropus} class object.}

\item{subset}{A \code{logical} expression indicating elements or rows to
keep. The expression may be unevaluated (using \code{quote} or
\code{bquote}).}

\item{regex}{A \code{logical} value. If \code{TRUE}, values for s-attributes
defined using the three dots (...) are interpreted as regular expressions
and passed into a \code{grep} call for subsetting a table with the regions
and values of structural attributes. If \code{FALSE} (the default), values
for s-attributes must match exactly.}

\item{...}{An expression that will be used to create a subcorpus from
s-attributes.}
}
\description{
The structural attributes of a corpus (s-attributes) can be used
  to generate subcorpora (i.e. a \code{subcorpus} class object) by applying
  the \code{subset}-method. To obtain a \code{subcorpus}, the
  \code{subset}-method can be applied on a corpus represented by a
  \code{corpus} object, a length-one \code{character} vector (as a shortcut),
  and on a \code{subcorpus} object.
}
\section{Methods (by generic)}{
\itemize{
\item \code{summary}: Get named list with basic information for
\code{subcorpus} object.

\item \code{name<-}: Assign name to a \code{subcorpus} object.

\item \code{subset}: Get a \code{subcorpus} from a corpus provided by a
\code{corpus} object or a length-one \code{character} vector, or a
\code{subcorpus}.

\item \code{size}: Get the size of a \code{subcorpus} object from the
respective slot of the object.
}}

\section{Slots}{

\describe{
\item{\code{s_attributes}}{A named \code{list} with the structural attributes
defining the subcorpus.}

\item{\code{cpos}}{A \code{matrix} with left and right corpus positions defining
regions (two column matrix with \code{integer} values).}

\item{\code{annotations}}{Object of class \code{list}.}

\item{\code{size}}{Total size (number of tokens) of the \code{subcorpus} object (a
length-one \code{integer} vector). The value is accessible by calling 
the \code{size}-method on the \code{subcorpus}-object (see examples).}

\item{\code{metadata}}{Object of class \code{data.frame}, metadata information.}

\item{\code{strucs}}{Object of class \code{integer}, the strucs defining the
subcorpus.}

\item{\code{xml}}{Object of class \code{character}, whether the xml is "flat" or
"nested".}

\item{\code{s_attribute_strucs}}{Object of class \code{character}, the base node.}
}}

\examples{
use("polmineR")

# basic example 
r <- corpus("REUTERS")
k <- subset(r, grepl("kuwait", places))
name(k) <- "kuwait"
summary(k)
size(k)

# the same with a magrittr pipe
corpus("REUTERS") \%>\%
  subset(grepl("kuwait", places)) \%>\%
  summary()
  
# subsetting a subcorpus in a pipe
stone <- corpus("GERMAPARLMINI") \%>\%
  subset(date == "2009-11-10") \%>\%
  subset(speaker == "Frank-Walter Steinmeier")

# perform count for subcorpus
corpus("REUTERS") \%>\% subset(grep("kuwait", places)) \%>\% count(p_attribute = "word")
corpus("REUTERS") \%>\% subset(grep("saudi-arabia", places)) \%>\% count('"Saudi" "Arabia"')
  
# keyword-in-context analysis (kwic)   
corpus("REUTERS") \%>\% subset(grep("kuwait", places)) \%>\% kwic("oil")

# examples for standard and non-standard evaluation
a <- corpus("GERMAPARLMINI")

# subsetting a corpus object using non-standard evaluation 
sc <- subset(a, speaker == "Angela Dorothea Merkel")
sc <- subset(a, speaker == "Bärbel Höhn")
sc <- subset(a, speaker == "Angela Dorothea Merkel" & date == "2009-10-28")
sc <- subset(a, grepl("Merkel", speaker))
sc <- subset(a, grepl("Merkel", speaker) & date == "2009-10-28")

# subsetting corpus specified by character vector 
sc <- subset("GERMAPARLMINI", grepl("Merkel", speaker))
sc <- subset("GERMAPARLMINI", speaker == "Angela Dorothea Merkel")
sc <- subset("GERMAPARLMINI", speaker == "Angela Dorothea Merkel" & date == "2009-10-28")
sc <- subset("GERMAPARLMINI", grepl("Merkel", speaker) & date == "2009-10-28")

# subsetting a corpus using the (old) logic of the partition-method
sc <- subset(a, speaker = "Angela Dorothea Merkel")
sc <- subset(a, speaker = "Bärbel Höhn")
sc <- subset(a, speaker = "Angela Dorothea Merkel", date = "2009-10-28")
sc <- subset(a, speaker = "Merkel", regex = TRUE)
sc <- subset(a, speaker = c("Merkel", "Kauder"), regex = TRUE)
sc <- subset(a, speaker = "Merkel", date = "2009-10-28", regex = TRUE)

# providing the value for s-attribute as a variable
who <- "Volker Kauder"
subset(a, quote(speaker == who))

# use bquote for quasiquotation when using a variable for subsetting in a loop
for (who in c("Angela Dorothea Merkel", "Volker Kauder", "Ronald Pofalla")){
   sc <- subset(a, bquote(speaker == .(who)))
   print(size(sc))
}

# equivalent procedure with lapply (DOES NOT WORK YET)
b <- lapply(
  c("Angela Dorothea Merkel", "Volker Kauder", "Ronald Pofalla"),
  function(who) subset(a, bquote(speaker == .(who)))
)
sapply(b, size)
}
\seealso{
\code{\link{size}} for detailed documentation on how to use the \code{size}-method.

Other classes to manage corpora: \code{\link{corpus-class}},
  \code{\link{regions}}
}
\concept{classes to manage corpora}
